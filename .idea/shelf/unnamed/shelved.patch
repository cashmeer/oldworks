Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1552405688000)
+++ .idea/vcs.xml	(date 1552405688000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: entry_finder.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom time import *\r\nfrom datetime import *\r\nimport re\r\n\r\n#df = pd.read_csv('C:/Code/Robex/Q1_demo/Kiwoom/300Tick_data_GCM17.csv')\r\ndf = pd.read_csv('300Tick_data_GCM17.csv')\r\nprint(df)\r\nprint(df.dtypes)\r\n\r\ndef TRIX(df, n):\r\n    EX1 = pd.DataFrame.ewm(df['close'], span = n, min_periods = n - 1).mean()\r\n    EX2 = EX1.ewm(span = n, min_periods = n - 1).mean()\r\n    EX3 = EX2.ewm(EX2, span = n, min_periods = n - 1).mean()\r\n    i = 0\r\n    ROC_l = [0]\r\n    while i + 1 <= df.index[-1]:\r\n        ROC = (EX3[i + 1] - EX3[i]) / EX3[i]\r\n        ROC_l.append(ROC)\r\n        i = i + 1\r\n    Trix = pd.Series(ROC_l)\r\n    return Trix\r\n\r\ndf['datetime'] = pd.to_datetime(df['datetime'])#,  format='%Y-%m-%d %H:%M:%S')\r\n\r\ndf['Date'] = df['datetime'].apply(lambda x: x.strftime('%Y%m%d'))\r\ndf['Time'] = df['datetime'].apply(lambda x: x.strftime('%H%M%S'))\r\n\r\ntrix_val = 1\r\ndf['Trix_' + str(trix_val)] = TRIX(df, trix_val)\r\ndf['Trix_shift_' + str(trix_val)] = TRIX(df, trix_val).shift(1)\r\nprint(df)\r\n\r\nprint(df)\r\nprint(df.dtypes)\r\n\r\ntime_list = df['Time'].tolist()\r\nhigh_list = df['high'].tolist()\r\nlow_list = df['low'].tolist()\r\nopen_list = df['open'].tolist()\r\nclose_list = df['close'].tolist()\r\ntrix_list = df['Trix_' + str(trix_val)].tolist()\r\ntrix_shift_list = df['Trix_shift_' + str(trix_val)].tolist()\r\n\r\nprint(trix_list)\r\nprint(trix_shift_list)\r\n\r\nnext_max = []\r\nnext_min = []\r\nday_medi = []\r\n#cross_up = []\r\n#cross_down = []\r\nmarketenter = []\r\nbuyorsell = []\r\ndef dayhigh():\r\n    next_max_val = 0\r\n    #open = 0\r\n    for t, h in zip(time_list, high_list):\r\n        if t == '070000':\r\n            open = h\r\n            next_max.append(open)\r\n            next_max_val = h\r\n        else:\r\n            #print(h, next_max_val)\r\n            #open = float(max(h, next_max[-1]))\r\n            next_max_val = float(max(h, next_max_val))\r\n            next_max.append(next_max_val)\r\n            #next_max.append(open)\r\n    print(next_max)\r\n\r\ndef daylow():\r\n    next_min_val = 0\r\n    #open = 0\r\n    for t, l in zip(time_list, low_list):\r\n        if t == '070000':\r\n            open = l\r\n            next_min.append(open)\r\n            next_min_val = l\r\n        else:\r\n            #print(l, next_min_val)\r\n            #open = float(max(h, next_max[-1]))\r\n            next_min_val = float(min(l,next_min_val, key=lambda x: (x==0, x)))\r\n            next_min.append(next_min_val)\r\n            #next_max.append(open)\r\n    print(next_min)\r\n\r\ndef daymedi():\r\n    for dh, dl in zip(next_max,next_min):\r\n        day_medi_val = (dh + dl) / 2\r\n        day_medi.append(day_medi_val)\r\n    print(day_medi)\r\n\r\ndef CrossDown(A, B):\r\n    if A > B and A[1] <= B[1]:\r\n        return False\r\n    else:\r\n        return True\r\n\r\ndef entermarket():\r\n    b_count = 0\r\n    s_count = 0\r\n    for o, dm, t1, c, ts in zip(open_list, day_medi, trix_list, close_list, trix_shift_list):\r\n        if o >= dm  and t1 >= 0 and ts <= 0:\r\n            b_count = b_count + 1\r\n            s_count = 0\r\n            if b_count == 1:\r\n                marketenter.append(c)\r\n                buyorsell.append(str('buy'))\r\n            else:\r\n                marketenter.append(int(0))\r\n                buyorsell.append(int(0))\r\n        elif o <= dm and t1 <= 0 and ts >= 0:\r\n            s_count = s_count + 1\r\n            b_count = 0\r\n            if s_count == 1:\r\n                marketenter.append(c)\r\n                buyorsell.append(str('sell'))\r\n            else:\r\n                marketenter.append(int(0))\r\n                buyorsell.append(int(0))\r\n        else:\r\n            marketenter.append(int(0))\r\n            buyorsell.append(int(0))\r\n    print(buyorsell)\r\n    print(marketenter)\r\n\r\ndayhigh()\r\ndaylow()\r\ndaymedi()\r\nentermarket()\r\n\r\n\r\n\r\n#day_m = round((next_max + next_min) / 2, 1)\r\n#print(day_m)\r\nnew_df = pd.DataFrame({\r\n    'datetime' : df['datetime'],\r\n    #'Time' : time_list,\r\n    #'high' : high_list,\r\n    'day_h': next_max,\r\n    #'low'  : low_list,\r\n    'day_l': next_min,\r\n    'day_m' : day_medi,\r\n    'trix1': trix_list,\r\n    'b&s': buyorsell,\r\n    '@price': marketenter\r\n    }, columns= ['datetime', 'day_h', 'day_l', 'day_m','trix1','b&s', '@price'])\r\n\r\nprint(new_df)\r\n\r\nresult = pd.merge_asof(df, new_df, on='datetime')\r\n#result['day_m'] = round((result['day_h'] + result['day_l']) / 2, 1)\r\n\r\n#df = pd.DataFrame(result, columns=['datetime', 'open', 'high', 'low', 'close', 'day_h', 'day_l', 'day_m'])\r\n#trix_val = 1\r\n#df['Trix_' + str(trix_val)] = TRIX(df, trix_val)\r\n#df['CU'] = df.where(df['open'] >= df['day_m'], df['close'], False) #& df['Trix_' + str(trix_val)] > 0\r\n#print(df)\r\n#print(df.dtypes)\r\n#df.to_csv(\"0_df_opti_gcm17_300_data.csv\")\r\nprint(result)\r\nresult.to_csv(\"entry_price_300Tick_GCM17.csv\", )\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- entry_finder.py	(revision b4fa7e30494b50930bae1b2b462cd27e462d533f)
+++ entry_finder.py	(date 1552405662000)
@@ -1,6 +1,6 @@
 import pandas as pd
 import numpy as np
-import matplotlib.pyplot as plt
+#import matplotlib.pyplot as plt
 from time import *
 from datetime import *
 import re
@@ -13,7 +13,7 @@
 def TRIX(df, n):
     EX1 = pd.DataFrame.ewm(df['close'], span = n, min_periods = n - 1).mean()
     EX2 = EX1.ewm(span = n, min_periods = n - 1).mean()
-    EX3 = EX2.ewm(EX2, span = n, min_periods = n - 1).mean()
+    EX3 = EX2.ewm(span = n, min_periods = n - 1).mean()
     i = 0
     ROC_l = [0]
     while i + 1 <= df.index[-1]:
Index: risk_stoptrade_simulator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport numpy as np\r\nimport random\r\n\r\nimport time\r\n\r\nfrom Simulator.r_list import R_val\r\n\r\nr_value_list = R_val\r\n\r\nnumber_of_trades = 70#int(len(r_value_list))\r\n#print(number_of_trades)\r\n\r\nnumber_of_simulations = 10000\r\n\r\nmin_risk_to_simulate = 0.001\r\nmax_risk_to_simulate = 0.1\r\nrisk_increment_size = 0.001\r\n\r\nstarting_equity = 170000\r\n\r\nSTARTING_STOP_TRADE = round(0.03, 2)\r\nENDING_STOP_TRADE = 0.07\r\nSTOP_TRADE_INCREMENT = 0.01\r\n\r\nprofit_goal = 0.2\r\n#stop_trade = 0.07\r\n\r\n#stop_trade_balance = starting_equity * (1 - stop_trade)\r\nsuccess_trade_balance = starting_equity + (starting_equity * profit_goal)\r\n#print(stop_trade_balance)\r\n#print(success_trade_balance)\r\n\r\nfinal_equity_list = []\r\nmax_wd_percent_list = []\r\nprofit_margin_list = []\r\n\r\ndf_list = []\r\n\r\n########################################################################################################################\r\n\r\ndef big_simulation(stop_trade):\r\n    current_risk = min_risk_to_simulate\r\n    stop_trade_balance = starting_equity * (1 - stop_trade)\r\n    index = 0\r\n    index_list = []\r\n    ult_risk_list = []\r\n\r\n    abort_trade = 0\r\n\r\n    final_table = {'Init Equity': [], 'Risk': [], 'Goal %': [], 'Stop lmt %': [], 'Avg R': [], 'Expected Return': [], 'Avg Final Equity': [],\r\n                   'Median Equity': [], 'Avg Profit %': [], 'Median Profit %': [], 'Max Lost %': [], 'Successful %': [], 'Stop Trade %': [],\r\n                   'SUCC% - STOP%': []\r\n                   }\r\n\r\n    while current_risk <= max_risk_to_simulate:\r\n        #current_risk += risk_increment_size\r\n        print(\"current risk at\", round(current_risk, 3), \"current stop trade at\", stop_trade)\r\n        ult_risk = round(current_risk, 3)\r\n        ult_risk_list.append(ult_risk)\r\n        #print(ult_risk_list)\r\n        #print(len(ult_risk_list))\r\n\r\n        starting_equity_list = []\r\n        final_equity_list = []\r\n        max_wd_percent_list = []\r\n        profit_margin_list = []\r\n        average_r_list = []\r\n        simulation_number_list = []\r\n        kill_trade_percent_list = []\r\n        final_average_r_list = []\r\n        final_expacted_return_list = []\r\n        avg_final_equity_list = []\r\n        #mean_final_equity_list = []\r\n        median_equity_list = []\r\n        avg_profit_margin_list = []\r\n        mean_profit_margin_lsit = []\r\n        success_trade_percent_list = []\r\n\r\n        expacted_return_list = []\r\n\r\n        avg_kill_trade_percent_list = []\r\n        avg_success_trade_percent_list = []\r\n\r\n        result_table = {'Simulation Number': [], 'Equity': [], 'Risk': [], 'Goal %': [], 'Stop Lmt %': [], 'Average R': [], 'Avg Balance': [], 'MD %': [], 'Numbers of killed Trade':[]}\r\n\r\n                        #'Trade Number': [], 'Risk %': [], 'Risk Equity': [],\r\n                        #     'Balance': [],\r\n                        #     'Max WD %': [],  , 'Stop Trade Balance': [],\r\n                        #     'Stop Trade %': [], }\r\n\r\n        for simulation_number in range(number_of_simulations):\r\n            equity = int(starting_equity)\r\n            trade = 0\r\n            accum = 0\r\n            kill_trade = 0\r\n\r\n            trade_number_list = []\r\n            random_r_list = []\r\n            current_risk_list = []\r\n            r_equity_list = []\r\n            equity_list = []\r\n            balance_list = []\r\n\r\n            profit_goal_list = []\r\n            stop_trade_list = []\r\n            stop_trade_balance_list = []\r\n            kill_trade_list = []\r\n            kill_trade_final_list = []\r\n\r\n            simulation_result = {'Equity': [], 'Trade Number': [], 'Risk %': [], 'Risk Equity': [], 'R': [],\r\n                                 'Balance': [],\r\n                                 'Max WD %': [], 'Goal %': [], 'Stop Limite %': [], 'Stop Trade Balance': [],\r\n                                 'Stop Trade %': [], }\r\n\r\n            # neg_r = []\r\n            max_draw_list = []\r\n\r\n            # while trade <= number_of_trades:\r\n            # shuffle_r_list = random.sample(r_value_list, k=number_of_trades)\r\n\r\n            while trade <= number_of_trades:\r\n                current_risk_list.append(current_risk)\r\n\r\n                profit_goal_list.append(profit_goal)\r\n                stop_trade_list.append(stop_trade)\r\n                stop_trade_balance_list.append(stop_trade_balance)\r\n\r\n                random_r = random.SystemRandom()\r\n                trade_r = random_r.choice(r_value_list)\r\n\r\n                #trade_r = i\r\n                # print(trade_r)\r\n                random_r_list.append(trade_r)\r\n\r\n                if trade_r < 0:\r\n                    # neg_r.append(int(-1))\r\n                    accum += trade_r\r\n                    max_draw_list.append(round(accum, 2))\r\n                else:\r\n                    # neg_r.append(int(0))\r\n                    accum = 0\r\n                    max_draw_list.append(round(accum, 2))\r\n\r\n                r_equity = equity * current_risk\r\n                r_equity_list.append(round(r_equity, 2))\r\n\r\n                trade_equity = (r_equity * trade_r)\r\n                equity_list.append(round(equity, 2))\r\n\r\n                equity += trade_equity\r\n                balance_list.append(round(equity, 2))\r\n\r\n                trade_number_list.append(trade)\r\n                trade += 1\r\n                #i += 1\r\n\r\n                if equity >= stop_trade_balance:\r\n                    kill_trade = 0\r\n                    kill_trade_list.append(kill_trade)\r\n                else:\r\n                    kill_trade = 1\r\n                    kill_trade_list.append(kill_trade)\r\n                    break\r\n\r\n            # print(trade_number_list)\r\n            # print(random_r_list)\r\n            # print(current_risk_list)\r\n            # print(r_equity_list)\r\n            # print(equity_list)\r\n            # print(balance_list)\r\n\r\n            # print(neg_r)\r\n            # print(max_draw_list)\r\n\r\n            simulation_result['Equity'].extend(list(equity_list))\r\n            simulation_result['Trade Number'].extend(list(trade_number_list))\r\n            simulation_result['Risk %'].extend(list(current_risk_list))\r\n            simulation_result['Risk Equity'].extend(list(r_equity_list))\r\n            simulation_result['R'].extend(list(random_r_list))\r\n            simulation_result['Balance'].extend(list(balance_list))\r\n            # simulation_result['0 or -1'].extend(list(neg_r))\r\n            simulation_result['Max WD %'].extend(list(max_draw_list))\r\n\r\n            simulation_result['Goal %'].extend(list(profit_goal_list))\r\n            simulation_result['Stop Limite %'].extend(list(stop_trade_list))\r\n            simulation_result['Stop Trade Balance'].extend(list(stop_trade_balance_list))\r\n            simulation_result['Stop Trade %'].extend(list(kill_trade_list))\r\n\r\n            #df = pd.DataFrame(simulation_result, columns=['Equity', 'Trade Number', 'Risk %', 'Risk Equity', 'R', 'Balance',\r\n            #                                              'Max WD %', 'Goal %', 'Stop Limite %', 'Stop Trade Balance', 'Stop Trade %'],\r\n            #                                       index=trade_number_list)\r\n            #df = pd.DataFrame(simulation_result, columns=['Equity', 'Trade Number', 'Risk %', 'Risk Equity', 'R', 'Balance',],\r\n            #                                       index=trade_number_list)\r\n            #                                              'Max WD %', 'Goal %', 'Stop Limite %', 'Stop Trade Balance', 'Stop Trade %'],\r\n\r\n            #print(df)\r\n\r\n            #if abort_trade == 0:\r\n            #    final_equity = balance_list[-1]\r\n            #else:\r\n            #    final_equity = min(balance_list,)\r\n\r\n            #elif abort_trade ===\r\n            final_equity = balance_list[-1]\r\n            #print(\"final eqt\",final_equity)\r\n\r\n            max_wd_percent = min(max_draw_list)\r\n            average_r = np.average(random_r_list)\r\n            profit_margin = (final_equity - starting_equity) / starting_equity\r\n            kill_trade_final = sum(kill_trade_list)\r\n\r\n            #print(final_equity)\r\n            #print(max_wd_percent)\r\n            #print(average_r)\r\n            #print(profit_margin)\r\n            #print(\"kill trade final\", kill_trade_final)\r\n            if kill_trade_final == 0:\r\n                kill_trade_percent_list.append(0)\r\n            else:\r\n                kill_trade_percent_list.append(1)\r\n\r\n            if profit_margin >= profit_goal:\r\n                success_trade_percent_list.append(1)\r\n            else:\r\n                success_trade_percent_list.append(0)\r\n            #print(\"killed trade percent list\", kill_trade_percent_list)\r\n            #print(\"number of kill\", len(kill_trade_percent_list))\r\n\r\n            #print(\"Success trade percent list\",success_trade_percent_list)\r\n            #print(\"num of success trade\", len(success_trade_percent_list))\r\n\r\n            starting_equity_list.append(starting_equity)\r\n            final_equity_list.append(final_equity)\r\n            max_wd_percent_list.append(max_wd_percent)\r\n            profit_margin_list.append(profit_margin)\r\n            average_r_list.append(average_r)\r\n            kill_trade_final_list.append(kill_trade_final)\r\n            simulation_number_list.append(simulation_number)\r\n\r\n            #print(\"average r list\",average_r_list)\r\n            #print(\"number of average r\", len(average_r_list))\r\n\r\n        #print(starting_equity_list)\r\n        #print(final_equity_list)\r\n        #print(max_wd_percent_list)\r\n        #print(profit_margin_list)\r\n        #print(average_r_list)\r\n        #print(\"kill trade final list\",kill_trade_final_list)\r\n\r\n        #print(simulation_number_list)\r\n\r\n        #print(\"killtrade final\",kill_trade_final)\r\n\r\n        result_table['Simulation Number'].extend(simulation_number_list)\r\n        result_table['Equity'].extend(starting_equity_list)\r\n        result_table['Avg Balance'].extend(final_equity_list)\r\n        result_table['Average R'].extend(average_r_list)\r\n        result_table['MD %'].extend(max_wd_percent_list)\r\n        result_table['Numbers of killed Trade'].extend(kill_trade_percent_list)\r\n\r\n        #middle_df = pd.DataFrame(result_table, columns=['Simulation Number', 'Equity', 'Average R', 'Avg Balance', 'MD %', 'Numbers of killed Trade'], index=simulation_number_list)\r\n\r\n        #print(middle_df)\r\n\r\n        index_list.append(index)\r\n        index += 1\r\n\r\n        max_neg_r = min(max_wd_percent_list)\r\n        #print(max_wd_percent_list)\r\n        #print(max_neg_r)\r\n        success_trade_percent = sum(success_trade_percent_list) / number_of_simulations\r\n        #print(\"success_trade_percent\",success_trade_percent)\r\n\r\n        kill_trade_percent = sum(kill_trade_percent_list) / number_of_simulations\r\n        #print(\"kill trade percent\", kill_trade_percent)\r\n\r\n        #avg_kill_trade_percent_list.append(kill_trade_percent)\r\n        #avg_success_trade_percent_list.append(success_trade_percent)\r\n        #for i in average_r_list:\r\n        #    expacted_return = i * ult_risk\r\n            #print(i, ult_risk, expacted_return)\r\n         #   expacted_return_list.append(expacted_return)\r\n\r\n        #final_expacted_return_list = np.average(expacted_return_list)\r\n\r\n        #print(average_r_list)\r\n        final_average_r_list = np.average(average_r_list)\r\n        #print(\"final average r\", final_average_r_list)\r\n\r\n        avg_profit_margin_list = np.average(profit_margin_list)\r\n        mean_profit_margin_list = np.mean(profit_margin_list)\r\n        median_profit_margin_list = np.median(profit_margin_list)\r\n        #print(\"finalaverage len\", len(final_average_r_list))\r\n        #print(final_equity_list)\r\n        avg_final_equity_list = np.average(final_equity_list)\r\n        #print(\"avg final eqt list\", avg_final_equity_list)\r\n        #mean_final_equity_list = np.mean(final_equity_list)\r\n\r\n        median_equity_list = np.median(final_equity_list)\r\n\r\n\r\n\r\n\r\n        #print(expacted_return_list)\r\n        #expacted_return = average_r_list * ult_risk\r\n        #print(expacted_return)\r\n        #print(\"median eqt list\",median_equity_list)\r\n        #print(\"avg final eqt len\", len(avg_final_equity_list))\r\n\r\n        #print(\"total num of stop trade\",total_num_of_stop_trade)\r\n\r\n        #total_num_of_stop_trade = sum(total_num_of_stop_trade)\r\n        #print(\"\")\r\n        #final_stop_trade_percent = total_num_of_stop_trade / range(number_of_simulations)\r\n\r\n        final_table['Init Equity'].append(round(starting_equity, 2))\r\n        final_table['Risk'].append(ult_risk)\r\n        final_table['Goal %'].append(profit_goal)\r\n        final_table['Stop lmt %'].append(stop_trade)\r\n        final_table['Avg R'].append(round(final_average_r_list, 4))\r\n        #final_table['Expacted Return'].append(final_expacted_return_list)\r\n        final_table['Expected Return'].append(final_average_r_list * ult_risk)\r\n\r\n\r\n\r\n        final_table['Avg Final Equity'].append(round(avg_final_equity_list, 2))\r\n        #final_table['Mean Final Equity'].append(round(mean_final_equity_list))\r\n        final_table['Median Equity'].append(round(median_equity_list,2))\r\n        final_table['Avg Profit %'].append(round(avg_profit_margin_list, 4))\r\n        #final_table['Mean Profit %'].append(round((mean_profit_margin_list), 4))\r\n\r\n        final_table['Median Profit %'].append(median_profit_margin_list)#round((mean_profit_margin_list), 4))\r\n\r\n\r\n\r\n        final_table['Max Lost %'].append(max_neg_r*ult_risk)\r\n\r\n        #print(\"max_neg_r*ult_risk\", max_neg_r*ult_risk)\r\n        #final_table['Max Neg R'].append(max_neg_r)\r\n        final_table['Stop Trade %'].append(kill_trade_percent)\r\n        final_table['Successful %'].append(success_trade_percent)\r\n        final_table['SUCC% - STOP%'].append(success_trade_percent-kill_trade_percent)\r\n        #print(\"success_trade_percent-kill_trade_percent\", success_trade_percent-kill_trade_percent)\r\n        current_risk += risk_increment_size\r\n        current_risk = round(current_risk, 3)\r\n\r\n    final_df = pd.DataFrame(final_table, columns=['Init Equity', 'Risk', 'Goal %', 'Stop lmt %', 'Avg R', 'Expected Return', 'Avg Final Equity',\r\n                                                  'Median Equity', 'Avg Profit %', 'Median Profit %', 'Max Lost %', 'Successful %', 'Stop Trade %', 'SUCC% - STOP%']\r\n                                       , index=index_list)\r\n\r\n    final_df.to_csv('PythonExport.csv', sep=',')\r\n    #print(final_df)\r\n    return final_df\r\n\r\nstart_time = time.time()\r\n\r\ndef excel_writer(STARTING_STOP_TRADE):\r\n    stop_trade = STARTING_STOP_TRADE\r\n    w = pd.ExcelWriter('risk_stop_simulator.xlsx')\r\n    while stop_trade <= ENDING_STOP_TRADE:\r\n        df = pd.DataFrame(big_simulation(stop_trade))#big_simulation(stop_trade)\r\n        print(stop_trade,' / ', ENDING_STOP_TRADE)\r\n        df.to_excel(w, sheet_name='stop trade_'+str(round(stop_trade,2)))\r\n        stop_trade += STOP_TRADE_INCREMENT\r\n        w.save()\r\n    print('done')\r\n\r\nexcel_writer(STARTING_STOP_TRADE)\r\n#big_simulation(0.07)\r\nprint(\"--- %s seconds ---\" % (time.time() - start_time))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- risk_stoptrade_simulator.py	(revision b4fa7e30494b50930bae1b2b462cd27e462d533f)
+++ risk_stoptrade_simulator.py	(date 1552405616000)
@@ -4,7 +4,7 @@
 
 import time
 
-from Simulator.r_list import R_val
+from r_list import R_val
 
 r_value_list = R_val
 
